<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>打工人，冲冲冲！！！</title>
    <link>https://www.changkunkun.cn/</link>
    <description>Recent content on 打工人，冲冲冲！！！</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 20 Apr 2021 09:24:32 +0800</lastBuildDate><atom:link href="https://www.changkunkun.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Make Rabbitmq Openshift Operator</title>
      <link>https://www.changkunkun.cn/posts/make-rabbitmq-openshift-operator/</link>
      <pubDate>Tue, 20 Apr 2021 09:24:32 +0800</pubDate>
      
      <guid>https://www.changkunkun.cn/posts/make-rabbitmq-openshift-operator/</guid>
      <description>制作 rabbitmq openshift operator  以 rabbitmq-operator github 官方项目为基础 https://github.com/rabbitmq/cluster-operator  命令行工具  kustomize   下载地址
 operator-sdk   下载地址
 opm   下载地址
 制作过程  本文档以 rabbitmq 1.6.0 为基础制作 operator，link   下载源码  从官方 releases 页面下载 1.6.0 源码 解压后改名为 rabbitmq-operator  修改部分源码  删除 rabbitmq-operator/.github 目录，此目录是官方 github action 部分的代码，对其他项目无用（也可以不删除） 在 rabbitmq-operator/internal/resource 目录新建 anyuid_role_binding.go 文件，将下面代码复制到文件中，代码是根据 role_binding.go 文件修改来的，目的是解决 openshift scc 权限问题  // RabbitMQ Cluster Operator // // Copyright 2020 VMware, Inc.</description>
    </item>
    
    <item>
      <title>k8s 单节点 mongodb 数据备份及恢复</title>
      <link>https://www.changkunkun.cn/posts/k8s%E5%8D%95%E8%8A%82%E7%82%B9mongodb%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E5%8F%8A%E6%81%A2%E5%A4%8D/</link>
      <pubDate>Sun, 21 Feb 2021 17:31:47 +0800</pubDate>
      
      <guid>https://www.changkunkun.cn/posts/k8s%E5%8D%95%E8%8A%82%E7%82%B9mongodb%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E5%8F%8A%E6%81%A2%E5%A4%8D/</guid>
      <description>背景  最近为测试同学搭建测试平台用到 mongo，但是阿里云的 mongo 服务收费太贵。 因此使用 k8s 自建单节点 mongo 服务，那就不得不考虑数据备份的问题。  思路   数据备份
建立 cronjob，通过 mongodump 全量备份数据，ossutil 上传至阿里云。
  数据恢复
建立 job ，通过 ossutil 下载 oss 备份的数据，mongorestore 全量恢复数据。
  Docker 镜像  Dockerfile 目录结构  docker |── Dockerfile |── mongo-manager.sh |── ossutil64  Dockerfile  # mongo 版本和 mongo 服务使用的版本保持一致 FROM mongo:4.4.3 COPY ossutil64 /usr/local/bin/ossutil64 RUN chmod 755 /usr/local/bin/ossutil64 COPY mongo-manager.sh /usr/local/bin/mongo-manager.sh RUN chmod 755 /usr/local/bin/mongo-manager.</description>
    </item>
    
  </channel>
</rss>
